@inproceedings{taelman_www_poster_2017,
  author    = {Taelman, Ruben and Verborgh, Ruben and De Nies, Tom and Mannens, Erik},
  title     = {PoDiGG: A Public Transport RDF Dataset Generator},
  booktitle = {Proceedings of the 26th International Conference Companion on World Wide Web},
  year      = {2017},
  month     = {april},
  url       = {http://rubensworks.net/raw/publications/2017/PodiggPublicTransportRdfDatasetGenerator.pdf},
  note      = {Accepted for publication at WWW},
  abstract  = {
A large amount of public transport data is made available by many different providers,
which makes RDF a great method for integrating these datasets.
Furthermore, this type of data provides a great source of information that combines both geospatial and temporal data.
These aspects are currently undertested in RDF data management systems, because of the limited availability of realistic input datasets.
In order to bring public transport data to the world of benchmarking, we need to be able to create synthetic variants of this data.
In this paper, we introduce a dataset generator with the capability to create realistic public transport data.
This dataset generator, and the ability to configure it on different levels,
makes it easier to use public transport data for benchmarking with great flexibility.
  },
  _type     = {Poster}
}

@inproceedings{taelman_ekaw_poster_2016,
  author    = {Taelman, Ruben and Verborgh, Ruben and Mannens, Erik},
  title     = {Exposing RDF Archives using Triple Pattern Fragments},
  booktitle = {Proceedings of the 20th International Conference on Knowledge Engineering and Knowledge Management: Posters and Demos},
  year      = {2016},
  month     = {november},
  url       = {http://rubensworks.net/raw/publications/2016/ExposingRdfArchivesUsingTpf.pdf},
  abstract  = {
Linked Datasets typically change over time, and knowledge of this historical information can be useful.
This makes the storage and querying of Dynamic Linked Open Data an important area of research.
With the current versioning solutions, publishing Dynamic Linked Open Data at Web-Scale is possible, but too expensive.
We investigate the possibility of using the low-cost Triple Pattern Fragments (TPF) interface to publish versioned Linked Open Data.
In this paper, we discuss requirements for supporting versioning in the TPF framework, on the level of the interface, storage and client,
and investigate which trade-offs exist. These requirements lay the foundations for further research in the area of low-cost,
Web-Scale dynamic Linked Open Data publication and querying.
  },
  _type     = {Poster}
}

@inproceedings{taelman_iswc_poster_2016,
  author    = {Taelman, Ruben and Heyvaert, Pieter and Verborgh, Ruben and Mannens, Erik},
  title     = {Querying Dynamic Datasources with Continuously Mapped Sensor Data},
  booktitle = {Proceedings of the 15th International Semantic Web Conference: Posters and Demos},
  year      = {2016},
  month     = {october},
  url       = {http://rubensworks.net/raw/publications/2016/QueryingDynamicDatasourcesWithContinuouslyMappedData.pdf},
  abstract  = {
The world contains a large amount of sensors that produce new data at
a high frequency. It is currently very hard to find public services that expose these
measurements as dynamic Linked Data. We investigate how sensor data can be
published continuously on the Web at a low cost. This paper describes how the
publication of various sensor data sources can be done by continuously mapping
raw sensor data to RDF and inserting it into a live, low-cost server. This makes it
possible for clients to continuously evaluate dynamic queries using public sensor
data. For our demonstration, we will illustrate how this pipeline works for the
publication of temperature and humidity data originating from a microcontroller,
and how it can be queried.
  },
  _type     = {Demo},
  _poster   = {http://www.slideshare.net/RubenTaelman/querying-dynamic-datasources-with-continuously-mapped-sensor-data}
}

@inproceedings{heyvaert_iswc_poster_2016,
  author    = {Heyvaert, Pieter and Taelman, Ruben and Verborgh, Ruben and Mannens, Erik},
  title     = {Linked Sensor Data Generation using Queryable RML Mappings},
  booktitle = {Proceedings of the 15th International Semantic Web Conference: Posters and Demos},
  year      = {2016},
  month     = {october},
  url       = {http://ceur-ws.org/Vol-1690/paper9.pdf},
  abstract  = {
As the amount of generated sensor data is increasing, semantic
interoperability becomes an important aspect in order to support
efficient data distribution and communication. Therefore, the integration
of (sensor) data is important, as this data is coming from different
data sources and might be in different formats. Furthermore, reusable
and extensible methods for this integration are required in order to be
able to scale with the growing number of applications that generate semantic
sensor data. Current research efforts allow to map sensor data
to Linked Data in order to provide semantic interoperability. However,
they lack support for multiple data sources, hampering the integration.
Furthermore, the used methods are not available for reuse or are not extensible,
which hampers the development of applications. In this paper,
we describe how the RDF Mapping Language (RML) and a Triple Pattern
Fragments (TPF) server are used to address these shortcomings. The
demonstration consists of a micro controller that generates sensor data.
The data is captured and mapped to rdf triples using module-specific
RML mappings, which are queried from a TPF server.
  },
  _type     = {Demo}
}

@inproceedings{taelman_iswc_cold_2016,
  author    = {Taelman, Ruben and Colpaert, Pieter and Verborgh, Ruben and Colpaert, Pieter and Mannens, Erik},
  title     = {Multidimensional Interfaces for Selecting Data within Ordinal Ranges},
  booktitle = {Proceedings of the 7th International Workshop on Consuming Linked Data},
  year      = {2016},
  month     = {october},
  url       = {http://rubensworks.net/raw/publications/2016/MultidimensionalInterfaces.pdf},
  abstract  = {
Linked Data interfaces exist in many flavours, as evidenced by subject
pages, sparql endpoints, triple pattern interfaces, and data dumps. These interfaces
are mostly used to retrieve parts of a complete dataset, such parts can for example be
defined by ranges in one or more dimensions. Filtering Linked Data by dimensions
such as time range, geospatial area, or genomic location, requires the lookup of data
within ordinal ranges. To make retrieval by such ranges generic and cost-efficient,
we propose a REST solution in-between looking up data within ordinal ranges
entirely on the server, or entirely on the client. To this end, we introduce a method
for extending any Linked Data interface with an n-dimensional interface-level index
such that n-dimensional ordinal data can be selected using n-dimensional ranges.
We formally define Range Gates and Range Fragments and theoretically evaluate
the cost-efficiency of hosting such an interface. By adding a multidimensional
index to a Linked Data interface for multidimensional ordinal data, we found that
we can get benefits from both worlds: the expressivity of the server raises, yet
remains more cost-efficient than an interface providing the full functionality on
the server-side. Furthermore, the client now shares in the effort to filter the data.
This makes query processing becomes more flexible to the end-user, because the
query plan can be altered by the engine. In future work we hope to apply Range
Gates and Range Fragments to real-world interfaces to give quicker access to data
within ordinal ranges
  },
  _type     = {Workshop},
  _slides   = {http://www.slideshare.net/RubenTaelman/multidimensional-interfaces-for-selecting-data-with-order}
}

@inproceedings{taelman_mepdaw_bp_2016,
  title        = {Continuous Client-Side Query Evaluation over Dynamic Linked Data},
  author       = {Taelman, Ruben and Verborgh, Ruben and Colpaert, Pieter and Mannens, Erik},
  booktitle    = {The Semantic Web: ESWC 2016 Satellite Events, Heraklion, Crete, Greece, May 29 -- June 2, 2016, Revised Selected Papers},
  pages        = {273--289},
  year         = {2016},
  month        = {may},
  organization = {Springer International Publishing},
  url          = {http://rubensworks.net/raw/publications/2016/Continuous_Client-Side_Query_Evaluation_over_Dynamic_Linked_Data.pdf},
  abstract     = {
Existing solutions to query dynamic Linked Data sources extend the sparql language, and require continuous server processing for each query.
Traditional sparql endpoints already accept highly expressive queries, so extending these endpoints for time-sensitive queries increases the server cost even further.
To make continuous querying over dynamic Linked Data more affordable, we extend the low-cost Triple Pattern Fragments (TPF) interface with support for time-sensitive queries.
In this paper, we introduce the TPF Query Streamer that allows clients to evaluate sparql queries with continuously updating results.
Our experiments indicate that this extension significantly lowers the server complexity, at the expense of an increase in the execution time per query.
We prove that by moving the complexity of continuously evaluating queries over dynamic Linked Data to the clients and thus increasing bandwidth usage, 
the cost at the server side is significantly reduced.
Our results show that this solution makes real-time querying more scalable for a large amount of concurrent clients when compared to the alternatives.
  },
  _type        = {Conference}
}

@inproceedings{taelman_eswc_poster_2016,
  author    = {Taelman, Ruben and Verborgh, Ruben and Colpaert, Pieter and Mannens, Erik and Van de Walle, Rik},
  title     = {Moving Real-Time {Linked Data} Query Evaluation to the Client},
  booktitle = {Proceedings of the 13th Extended Semantic Web Conference: Posters and Demos},
  year      = {2016},
  month     = {may},
  url       = {http://2016.eswc-conferences.org/sites/default/files/papers/Accepted%20Posters%20and%20Demos/ESWC2016_POSTER_Moving_Real-Time_Linked_Data.pdf},
  abstract  = {
Traditional RDF stream processing engines work completely server-side, which contributes to a high server cost.
For allowing a large number of concurrent clients to do continuous querying,
we extend the low-cost Triple Pattern Fragments (TPF) interface with support for time-sensitive queries.
In this poster, we give the overview of a client-side RDF stream processing engine on top of TPF.
Our experiments show that our solution significantly lowers the server load while increasing the load on the clients.
Preliminary results indicate that our solution moves the complexity of continuously evaluating real-time queries
from the server to the client, which makes real-time querying much more scalable for a large amount of concurrent
clients when compared to the alternatives.
  },
  _type     = {Poster},
  _poster   = {http://www.slideshare.net/RubenTaelman/moving-rdf-stream-processing-to-the-client}
}

@inproceedings{taelman_eswc_phdsymp_2016,
  title        = {Continuously Self-Updating Query Results over Dynamic Heterogeneous Linked Data},
  author       = {Taelman, Ruben},
  booktitle    = {The Semantic Web. Latest Advances and New Domains: 13th International Conference, ESWC 2016, Heraklion, Crete, Greece, May 29 -- June 2, 2016, Proceedings},
  pages        = {863--872},
  year         = {2016},
  month        = {may},
  organization = {Springer International Publishing},
  url          = {http://rubensworks.net/raw/publications/2016/Continuously_Self-Updating_Query_Results_over_Dynamic_Heterogeneous_Linked_Data.pdf},
  abstract     = {
Our society is evolving towards massive data consumption from heterogeneous sources, which includes rapidly changing data
like public transit delay information.
Many applications that depend on dynamic data consumption require highly available server interfaces.
Existing interfaces involve substantial costs to publish rapidly changing data with high availability,
and are therefore only possible for
organisations that can afford such an expensive infrastructure.
In my doctoral research, I investigate how to publish and consume real-time and historical Linked Data on a large scale.
To reduce server-side costs for making dynamic data publication affordable,
I will examine different possibilities to divide query evaluation between servers and clients.
This paper discusses the methods I aim to follow together with preliminary results and the steps required to use this solution.
An initial prototype achieves significantly lower server processing cost per query, while maintaining reasonable
query execution times and client costs.
Given these promising results, I feel confident this research direction is a viable solution for offering low-cost
dynamic Linked Data interfaces as opposed to the existing high-cost solutions.
  },
  _type        = {PhD Symposium},
  _slides      = {http://www.slideshare.net/RubenTaelman/continuous-selfupdating-query-results-over-dynamic-linked-data},
  _poster      = {http://www.slideshare.net/RubenTaelman/scalable-dynamic-data-consumption-on-the-web}
}

@inproceedings{taelman_mepdaw_2016,
  title     = {Continuously Updating Query Results over Real-Time {Linked Data}},
  author    = {Taelman, Ruben and Verborgh, Ruben and Colpaert, Pieter and Mannens, Erik and Van de Walle, Rik},
  booktitle = {Proceedings of the 2nd Workshop on Managing the Evolution and Preservation of the Data Web},
  year      = {2016},
  month     = {may},
  url       = {http://ceur-ws.org/Vol-1585/mepdaw2016_paper_01.pdf},
  abstract  = {
Existing solutions to query dynamic Linked Data sources extend the SPARQL language,
and require continuous server processing for each query.
Traditional SPARQL endpoints accept highly expressive queries, contributing to high server cost.
Extending these endpoints for time-sensitive queries increases the server cost even further.
To make continuous querying over real-time Linked Data more affordable,
we extend the low-cost Triple Pattern Fragments (TPF) interface with support for time-sensitive queries.
In this paper, we discuss a framework on top of TPF that allows clients to execute
SPARQL queries with continuously updating results.
Our experiments indicate that this extension significantly lowers the server complexity.
The trade-off is an increase in the execution time per query.
We prove that by moving the complexity of continuously evaluating real-time queries over Linked Data to the clients
and thus increasing the bandwidth usage, the cost of server-side interfaces is significantly reduced.
Our results show that this solution makes real-time querying more scalable in terms of cpu usage for a large amount
of concurrent clients when compared to the alternatives.
  },
  _type     = {Workshop},
  _slides   = {http://www.slideshare.net/RubenTaelman/continuously-updating-query-results-over-realtime-linked-data}
}

@MastersThesis{taelman_mastersthesis,
  author   = {Taelman, Ruben},
  title    = {Continuously Updating Queries over Real-Time {Linked} {Data}},
  school   = {Ghent University},
  address  = {Belgium},
  year     = {2015},
  month    = {may},
  url      = {http://lib.ugent.be/fulltxt/RUG01/002/224/537/RUG01-002224537_2015_0001_AC.pdf},
  abstract = {
This dissertation investigates the possibilities of having continuously updating
queries over Linked Data with a focus on server availability. This work builds upon the ideas
of Linked Data Fragments to let the clients do most of the work when executing a query. The
server adds metadata to make the clients aware of the data volatility for making sure the
query results are always up-to-date. The implementation of the framework that is proposed,
is eventually tested and compared to other alternative approaches.
  },
  _type    = {Master's Thesis}
}
